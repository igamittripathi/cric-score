// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Player Player should render properly 1`] = `
<div
  style={
    Object {
      "alignItems": "center",
      "display": "flex",
      "justifyContent": "space-between",
    }
  }
>
  <Textbox
    error={false}
    placeholder="Name"
    required={false}
  />
  <Dropdwon />
</div>
`;

exports[`Player Player should render properly with props 1`] = `
<Memo()
  isNameError={false}
  isNameReqired={true}
  name="test player"
  onNameBlur={[MockFunction]}
  onNameChange={[MockFunction]}
  onNameFocus={[MockFunction]}
  onPlayerTypeChange={[MockFunction]}
  options={
    Array [
      "batsman",
      "bowler",
    ]
  }
  placeholder="Name"
  type="batsman"
>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "justifyContent": "space-between",
      }
    }
  >
    <Textbox
      error={false}
      onBlur={[MockFunction]}
      onChange={[MockFunction]}
      onFocus={[MockFunction]}
      placeholder="Name"
      required={true}
      value="test player"
    >
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-margin-1"
      >
        <ForwardRef(FormControl)
          className="makeStyles-margin-1"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
        >
          <div
            className="MuiFormControl-root makeStyles-margin-1"
          >
            <WithStyles(ForwardRef(InputLabel))
              error={false}
              htmlFor="customized-textboxundefined"
              required={true}
              style={
                Object {
                  "backgroundColor": "#FFF",
                }
              }
              variant="filled"
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                error={false}
                htmlFor="customized-textboxundefined"
                required={true}
                style={
                  Object {
                    "backgroundColor": "#FFF",
                  }
                }
                variant="filled"
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={true}
                  error={false}
                  htmlFor="customized-textboxundefined"
                  required={true}
                  style={
                    Object {
                      "backgroundColor": "#FFF",
                    }
                  }
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={true}
                    error={false}
                    htmlFor="customized-textboxundefined"
                    required={true}
                    style={
                      Object {
                        "backgroundColor": "#FFF",
                      }
                    }
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled MuiFormLabel-filled Mui-required Mui-required"
                      data-shrink={true}
                      htmlFor="customized-textboxundefined"
                      style={
                        Object {
                          "backgroundColor": "#FFF",
                        }
                      }
                    >
                      Name
                      <span
                        aria-hidden={true}
                        className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                      >
                        â€‰
                        *
                      </span>
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(WithStyles(ForwardRef(InputBase)))
              error={false}
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              onFocus={[MockFunction]}
              placeholder="Name"
              required={true}
              value="test player"
            >
              <WithStyles(ForwardRef(InputBase))
                classes={
                  Object {
                    "input": "WithStyles(ForwardRef(InputBase))-input-3",
                    "root": "WithStyles(ForwardRef(InputBase))-root-2",
                  }
                }
                error={false}
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                onFocus={[MockFunction]}
                placeholder="Name"
                required={true}
                value="test player"
              >
                <ForwardRef(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd",
                      "adornedStart": "MuiInputBase-adornedStart",
                      "colorSecondary": "MuiInputBase-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInputBase-formControl",
                      "fullWidth": "MuiInputBase-fullWidth",
                      "input": "MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                      "inputMarginDense": "MuiInputBase-inputMarginDense",
                      "inputMultiline": "MuiInputBase-inputMultiline",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                      "marginDense": "MuiInputBase-marginDense",
                      "multiline": "MuiInputBase-multiline",
                      "root": "MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2",
                    }
                  }
                  error={false}
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  onFocus={[MockFunction]}
                  placeholder="Name"
                  required={true}
                  value="test player"
                >
                  <div
                    className="MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2 MuiInputBase-formControl"
                    onClick={[Function]}
                    required={true}
                  >
                    <input
                      aria-invalid={false}
                      className="MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                      disabled={false}
                      onAnimationStart={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Name"
                      required={true}
                      type="text"
                      value="test player"
                    />
                  </div>
                </ForwardRef(InputBase)>
              </WithStyles(ForwardRef(InputBase))>
            </WithStyles(WithStyles(ForwardRef(InputBase)))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </Textbox>
    <Dropdwon
      onChange={[MockFunction]}
      options={
        Array [
          "batsman",
          "bowler",
        ]
      }
      value="batsman"
    >
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-margin-1"
      >
        <ForwardRef(FormControl)
          className="makeStyles-margin-1"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
        >
          <div
            className="MuiFormControl-root makeStyles-margin-1"
          >
            <WithStyles(ForwardRef(InputLabel))
              error={false}
              htmlFor="selectundefined"
              required={false}
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                error={false}
                htmlFor="selectundefined"
                required={false}
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={true}
                  error={false}
                  htmlFor="selectundefined"
                  required={false}
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={true}
                    error={false}
                    htmlFor="selectundefined"
                    required={false}
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled"
                      data-shrink={true}
                      htmlFor="selectundefined"
                    >
                      Type
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(ForwardRef(Select))
              error={false}
              input={<ForwardRef(WithStyles) />}
              onChange={[MockFunction]}
              required={false}
              value="batsman"
            >
              <ForwardRef(Select)
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "filled": "MuiSelect-filled",
                    "icon": "MuiSelect-icon",
                    "iconFilled": "MuiSelect-iconFilled",
                    "iconOpen": "MuiSelect-iconOpen",
                    "iconOutlined": "MuiSelect-iconOutlined",
                    "nativeInput": "MuiSelect-nativeInput",
                    "outlined": "MuiSelect-outlined",
                    "root": "MuiSelect-root",
                    "select": "MuiSelect-select",
                    "selectMenu": "MuiSelect-selectMenu",
                  }
                }
                error={false}
                input={<ForwardRef(WithStyles) />}
                onChange={[MockFunction]}
                required={false}
                value="batsman"
              >
                <WithStyles(WithStyles(ForwardRef(InputBase)))
                  error={false}
                  inputComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "IconComponent": [Function],
                        "MenuProps": [Function],
                        "SelectDisplayProps": [Function],
                        "aria-label": [Function],
                        "autoFocus": [Function],
                        "autoWidth": [Function],
                        "children": [Function],
                        "className": [Function],
                        "classes": [Function],
                        "defaultValue": [Function],
                        "disabled": [Function],
                        "displayEmpty": [Function],
                        "inputRef": [Function],
                        "labelId": [Function],
                        "multiple": [Function],
                        "name": [Function],
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onClose": [Function],
                        "onFocus": [Function],
                        "onOpen": [Function],
                        "open": [Function],
                        "readOnly": [Function],
                        "renderValue": [Function],
                        "tabIndex": [Function],
                        "type": [Function],
                        "value": [Function],
                        "variant": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  inputProps={
                    Object {
                      "IconComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "render": [Function],
                        },
                      },
                      "MenuProps": undefined,
                      "SelectDisplayProps": Object {
                        "id": undefined,
                      },
                      "autoWidth": false,
                      "children": Array [
                        <ForwardRef(WithStyles)
                          value="batsman"
                        >
                          batsman
                        </ForwardRef(WithStyles)>,
                        <ForwardRef(WithStyles)
                          value="bowler"
                        >
                          bowler
                        </ForwardRef(WithStyles)>,
                      ],
                      "classes": Object {
                        "disabled": "Mui-disabled",
                        "filled": "MuiSelect-filled",
                        "icon": "MuiSelect-icon",
                        "iconFilled": "MuiSelect-iconFilled",
                        "iconOpen": "MuiSelect-iconOpen",
                        "iconOutlined": "MuiSelect-iconOutlined",
                        "nativeInput": "MuiSelect-nativeInput",
                        "outlined": "MuiSelect-outlined",
                        "root": "MuiSelect-root",
                        "select": "MuiSelect-select",
                        "selectMenu": "MuiSelect-selectMenu",
                      },
                      "displayEmpty": false,
                      "labelId": undefined,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={[MockFunction]}
                  required={false}
                  value="batsman"
                >
                  <WithStyles(ForwardRef(InputBase))
                    classes={
                      Object {
                        "input": "WithStyles(ForwardRef(InputBase))-input-3",
                        "root": "WithStyles(ForwardRef(InputBase))-root-2",
                      }
                    }
                    error={false}
                    inputComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "propTypes": Object {
                          "IconComponent": [Function],
                          "MenuProps": [Function],
                          "SelectDisplayProps": [Function],
                          "aria-label": [Function],
                          "autoFocus": [Function],
                          "autoWidth": [Function],
                          "children": [Function],
                          "className": [Function],
                          "classes": [Function],
                          "defaultValue": [Function],
                          "disabled": [Function],
                          "displayEmpty": [Function],
                          "inputRef": [Function],
                          "labelId": [Function],
                          "multiple": [Function],
                          "name": [Function],
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onClose": [Function],
                          "onFocus": [Function],
                          "onOpen": [Function],
                          "open": [Function],
                          "readOnly": [Function],
                          "renderValue": [Function],
                          "tabIndex": [Function],
                          "type": [Function],
                          "value": [Function],
                          "variant": [Function],
                        },
                        "render": [Function],
                      }
                    }
                    inputProps={
                      Object {
                        "IconComponent": Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        },
                        "MenuProps": undefined,
                        "SelectDisplayProps": Object {
                          "id": undefined,
                        },
                        "autoWidth": false,
                        "children": Array [
                          <ForwardRef(WithStyles)
                            value="batsman"
                          >
                            batsman
                          </ForwardRef(WithStyles)>,
                          <ForwardRef(WithStyles)
                            value="bowler"
                          >
                            bowler
                          </ForwardRef(WithStyles)>,
                        ],
                        "classes": Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "nativeInput": "MuiSelect-nativeInput",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        },
                        "displayEmpty": false,
                        "labelId": undefined,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    onChange={[MockFunction]}
                    required={false}
                    value="batsman"
                  >
                    <ForwardRef(InputBase)
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd",
                          "adornedStart": "MuiInputBase-adornedStart",
                          "colorSecondary": "MuiInputBase-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInputBase-formControl",
                          "fullWidth": "MuiInputBase-fullWidth",
                          "input": "MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                          "inputMarginDense": "MuiInputBase-inputMarginDense",
                          "inputMultiline": "MuiInputBase-inputMultiline",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                          "marginDense": "MuiInputBase-marginDense",
                          "multiline": "MuiInputBase-multiline",
                          "root": "MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2",
                        }
                      }
                      error={false}
                      inputComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "IconComponent": [Function],
                            "MenuProps": [Function],
                            "SelectDisplayProps": [Function],
                            "aria-label": [Function],
                            "autoFocus": [Function],
                            "autoWidth": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "displayEmpty": [Function],
                            "inputRef": [Function],
                            "labelId": [Function],
                            "multiple": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onClose": [Function],
                            "onFocus": [Function],
                            "onOpen": [Function],
                            "open": [Function],
                            "readOnly": [Function],
                            "renderValue": [Function],
                            "tabIndex": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        }
                      }
                      inputProps={
                        Object {
                          "IconComponent": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "render": [Function],
                            },
                          },
                          "MenuProps": undefined,
                          "SelectDisplayProps": Object {
                            "id": undefined,
                          },
                          "autoWidth": false,
                          "children": Array [
                            <ForwardRef(WithStyles)
                              value="batsman"
                            >
                              batsman
                            </ForwardRef(WithStyles)>,
                            <ForwardRef(WithStyles)
                              value="bowler"
                            >
                              bowler
                            </ForwardRef(WithStyles)>,
                          ],
                          "classes": Object {
                            "disabled": "Mui-disabled",
                            "filled": "MuiSelect-filled",
                            "icon": "MuiSelect-icon",
                            "iconFilled": "MuiSelect-iconFilled",
                            "iconOpen": "MuiSelect-iconOpen",
                            "iconOutlined": "MuiSelect-iconOutlined",
                            "nativeInput": "MuiSelect-nativeInput",
                            "outlined": "MuiSelect-outlined",
                            "root": "MuiSelect-root",
                            "select": "MuiSelect-select",
                            "selectMenu": "MuiSelect-selectMenu",
                          },
                          "displayEmpty": false,
                          "labelId": undefined,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      onChange={[MockFunction]}
                      required={false}
                      value="batsman"
                    >
                      <div
                        className="MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2 MuiInputBase-formControl"
                        onClick={[Function]}
                        required={false}
                      >
                        <ForwardRef(SelectInput)
                          IconComponent={
                            Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            }
                          }
                          SelectDisplayProps={
                            Object {
                              "id": undefined,
                            }
                          }
                          aria-invalid={false}
                          autoWidth={false}
                          className="MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            }
                          }
                          disabled={false}
                          displayEmpty={false}
                          inputRef={[Function]}
                          multiple={false}
                          onAnimationStart={[Function]}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={false}
                          value="batsman"
                          variant="standard"
                        >
                          <div
                            aria-haspopup="listbox"
                            className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            batsman
                          </div>
                          <input
                            aria-hidden={true}
                            className="MuiSelect-nativeInput"
                            onAnimationStart={[Function]}
                            onChange={[Function]}
                            required={false}
                            tabIndex={-1}
                            value="batsman"
                          />
                          <ForwardRef(ArrowDropDownIcon)
                            className="MuiSelect-icon"
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              className="MuiSelect-icon"
                            >
                              <ForwardRef(SvgIcon)
                                className="MuiSelect-icon"
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden={true}
                                  className="MuiSvgIcon-root MuiSelect-icon"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M7 10l5 5 5-5z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef(ArrowDropDownIcon)>
                          <WithStyles(ForwardRef(Menu))
                            MenuListProps={
                              Object {
                                "aria-labelledby": undefined,
                                "disableListWrap": true,
                                "role": "listbox",
                              }
                            }
                            PaperProps={
                              Object {
                                "style": Object {
                                  "minWidth": undefined,
                                },
                              }
                            }
                            anchorEl={
                              <div
                                aria-haspopup="listbox"
                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                role="button"
                                tabindex="0"
                              >
                                batsman
                              </div>
                            }
                            id="menu-"
                            onClose={[Function]}
                            open={false}
                          >
                            <ForwardRef(Menu)
                              MenuListProps={
                                Object {
                                  "aria-labelledby": undefined,
                                  "disableListWrap": true,
                                  "role": "listbox",
                                }
                              }
                              PaperProps={
                                Object {
                                  "style": Object {
                                    "minWidth": undefined,
                                  },
                                }
                              }
                              anchorEl={
                                <div
                                  aria-haspopup="listbox"
                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                  role="button"
                                  tabindex="0"
                                >
                                  batsman
                                </div>
                              }
                              classes={
                                Object {
                                  "list": "MuiMenu-list",
                                  "paper": "MuiMenu-paper",
                                }
                              }
                              id="menu-"
                              onClose={[Function]}
                              open={false}
                            >
                              <WithStyles(ForwardRef(Popover))
                                PaperProps={
                                  Object {
                                    "classes": Object {
                                      "root": "MuiMenu-paper",
                                    },
                                    "style": Object {
                                      "minWidth": undefined,
                                    },
                                  }
                                }
                                anchorEl={
                                  <div
                                    aria-haspopup="listbox"
                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                    role="button"
                                    tabindex="0"
                                  >
                                    batsman
                                  </div>
                                }
                                anchorOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                getContentAnchorEl={[Function]}
                                id="menu-"
                                onClose={[Function]}
                                onEntering={[Function]}
                                open={false}
                                transformOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                transitionDuration="auto"
                              >
                                <ForwardRef(Popover)
                                  PaperProps={
                                    Object {
                                      "classes": Object {
                                        "root": "MuiMenu-paper",
                                      },
                                      "style": Object {
                                        "minWidth": undefined,
                                      },
                                    }
                                  }
                                  anchorEl={
                                    <div
                                      aria-haspopup="listbox"
                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                      role="button"
                                      tabindex="0"
                                    >
                                      batsman
                                    </div>
                                  }
                                  anchorOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  classes={
                                    Object {
                                      "paper": "MuiPopover-paper",
                                      "root": "MuiPopover-root",
                                    }
                                  }
                                  getContentAnchorEl={[Function]}
                                  id="menu-"
                                  onClose={[Function]}
                                  onEntering={[Function]}
                                  open={false}
                                  transformOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  transitionDuration="auto"
                                >
                                  <ForwardRef(Modal)
                                    BackdropProps={
                                      Object {
                                        "invisible": true,
                                      }
                                    }
                                    className="MuiPopover-root"
                                    container={<body />}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                  />
                                </ForwardRef(Popover)>
                              </WithStyles(ForwardRef(Popover))>
                            </ForwardRef(Menu)>
                          </WithStyles(ForwardRef(Menu))>
                        </ForwardRef(SelectInput)>
                      </div>
                    </ForwardRef(InputBase)>
                  </WithStyles(ForwardRef(InputBase))>
                </WithStyles(WithStyles(ForwardRef(InputBase)))>
              </ForwardRef(Select)>
            </WithStyles(ForwardRef(Select))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </Dropdwon>
  </div>
</Memo()>
`;

exports[`Player allows us to set props 1`] = `
<Memo()
  isNameError={false}
  isNameReqired={true}
  name="test player"
  onNameBlur={[MockFunction]}
  onNameChange={[MockFunction]}
  onNameFocus={[MockFunction]}
  onPlayerTypeChange={[MockFunction]}
  options={
    Array [
      "batsman",
      "bowler",
    ]
  }
  placeholder="Name"
  type="batsman"
>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "justifyContent": "space-between",
      }
    }
  >
    <Textbox
      error={false}
      onBlur={[MockFunction]}
      onChange={[MockFunction]}
      onFocus={[MockFunction]}
      placeholder="Name"
      required={true}
      value="test player"
    >
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-margin-1"
      >
        <ForwardRef(FormControl)
          className="makeStyles-margin-1"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
        >
          <div
            className="MuiFormControl-root makeStyles-margin-1"
          >
            <WithStyles(ForwardRef(InputLabel))
              error={false}
              htmlFor="customized-textboxundefined"
              required={true}
              style={
                Object {
                  "backgroundColor": "#FFF",
                }
              }
              variant="filled"
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                error={false}
                htmlFor="customized-textboxundefined"
                required={true}
                style={
                  Object {
                    "backgroundColor": "#FFF",
                  }
                }
                variant="filled"
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={true}
                  error={false}
                  htmlFor="customized-textboxundefined"
                  required={true}
                  style={
                    Object {
                      "backgroundColor": "#FFF",
                    }
                  }
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={true}
                    error={false}
                    htmlFor="customized-textboxundefined"
                    required={true}
                    style={
                      Object {
                        "backgroundColor": "#FFF",
                      }
                    }
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled MuiFormLabel-filled Mui-required Mui-required"
                      data-shrink={true}
                      htmlFor="customized-textboxundefined"
                      style={
                        Object {
                          "backgroundColor": "#FFF",
                        }
                      }
                    >
                      Name
                      <span
                        aria-hidden={true}
                        className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                      >
                        â€‰
                        *
                      </span>
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(WithStyles(ForwardRef(InputBase)))
              error={false}
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              onFocus={[MockFunction]}
              placeholder="Name"
              required={true}
              value="test player"
            >
              <WithStyles(ForwardRef(InputBase))
                classes={
                  Object {
                    "input": "WithStyles(ForwardRef(InputBase))-input-3",
                    "root": "WithStyles(ForwardRef(InputBase))-root-2",
                  }
                }
                error={false}
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                onFocus={[MockFunction]}
                placeholder="Name"
                required={true}
                value="test player"
              >
                <ForwardRef(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd",
                      "adornedStart": "MuiInputBase-adornedStart",
                      "colorSecondary": "MuiInputBase-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInputBase-formControl",
                      "fullWidth": "MuiInputBase-fullWidth",
                      "input": "MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                      "inputMarginDense": "MuiInputBase-inputMarginDense",
                      "inputMultiline": "MuiInputBase-inputMultiline",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                      "marginDense": "MuiInputBase-marginDense",
                      "multiline": "MuiInputBase-multiline",
                      "root": "MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2",
                    }
                  }
                  error={false}
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  onFocus={[MockFunction]}
                  placeholder="Name"
                  required={true}
                  value="test player"
                >
                  <div
                    className="MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2 MuiInputBase-formControl"
                    onClick={[Function]}
                    required={true}
                  >
                    <input
                      aria-invalid={false}
                      className="MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                      disabled={false}
                      onAnimationStart={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Name"
                      required={true}
                      type="text"
                      value="test player"
                    />
                  </div>
                </ForwardRef(InputBase)>
              </WithStyles(ForwardRef(InputBase))>
            </WithStyles(WithStyles(ForwardRef(InputBase)))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </Textbox>
    <Dropdwon
      onChange={[MockFunction]}
      options={
        Array [
          "batsman",
          "bowler",
        ]
      }
      value="batsman"
    >
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-margin-1"
      >
        <ForwardRef(FormControl)
          className="makeStyles-margin-1"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
        >
          <div
            className="MuiFormControl-root makeStyles-margin-1"
          >
            <WithStyles(ForwardRef(InputLabel))
              error={false}
              htmlFor="selectundefined"
              required={false}
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                error={false}
                htmlFor="selectundefined"
                required={false}
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={true}
                  error={false}
                  htmlFor="selectundefined"
                  required={false}
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={true}
                    error={false}
                    htmlFor="selectundefined"
                    required={false}
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled"
                      data-shrink={true}
                      htmlFor="selectundefined"
                    >
                      Type
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(ForwardRef(Select))
              error={false}
              input={<ForwardRef(WithStyles) />}
              onChange={[MockFunction]}
              required={false}
              value="batsman"
            >
              <ForwardRef(Select)
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "filled": "MuiSelect-filled",
                    "icon": "MuiSelect-icon",
                    "iconFilled": "MuiSelect-iconFilled",
                    "iconOpen": "MuiSelect-iconOpen",
                    "iconOutlined": "MuiSelect-iconOutlined",
                    "nativeInput": "MuiSelect-nativeInput",
                    "outlined": "MuiSelect-outlined",
                    "root": "MuiSelect-root",
                    "select": "MuiSelect-select",
                    "selectMenu": "MuiSelect-selectMenu",
                  }
                }
                error={false}
                input={<ForwardRef(WithStyles) />}
                onChange={[MockFunction]}
                required={false}
                value="batsman"
              >
                <WithStyles(WithStyles(ForwardRef(InputBase)))
                  error={false}
                  inputComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "IconComponent": [Function],
                        "MenuProps": [Function],
                        "SelectDisplayProps": [Function],
                        "aria-label": [Function],
                        "autoFocus": [Function],
                        "autoWidth": [Function],
                        "children": [Function],
                        "className": [Function],
                        "classes": [Function],
                        "defaultValue": [Function],
                        "disabled": [Function],
                        "displayEmpty": [Function],
                        "inputRef": [Function],
                        "labelId": [Function],
                        "multiple": [Function],
                        "name": [Function],
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onClose": [Function],
                        "onFocus": [Function],
                        "onOpen": [Function],
                        "open": [Function],
                        "readOnly": [Function],
                        "renderValue": [Function],
                        "tabIndex": [Function],
                        "type": [Function],
                        "value": [Function],
                        "variant": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  inputProps={
                    Object {
                      "IconComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "render": [Function],
                        },
                      },
                      "MenuProps": undefined,
                      "SelectDisplayProps": Object {
                        "id": undefined,
                      },
                      "autoWidth": false,
                      "children": Array [
                        <ForwardRef(WithStyles)
                          value="batsman"
                        >
                          batsman
                        </ForwardRef(WithStyles)>,
                        <ForwardRef(WithStyles)
                          value="bowler"
                        >
                          bowler
                        </ForwardRef(WithStyles)>,
                      ],
                      "classes": Object {
                        "disabled": "Mui-disabled",
                        "filled": "MuiSelect-filled",
                        "icon": "MuiSelect-icon",
                        "iconFilled": "MuiSelect-iconFilled",
                        "iconOpen": "MuiSelect-iconOpen",
                        "iconOutlined": "MuiSelect-iconOutlined",
                        "nativeInput": "MuiSelect-nativeInput",
                        "outlined": "MuiSelect-outlined",
                        "root": "MuiSelect-root",
                        "select": "MuiSelect-select",
                        "selectMenu": "MuiSelect-selectMenu",
                      },
                      "displayEmpty": false,
                      "labelId": undefined,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={[MockFunction]}
                  required={false}
                  value="batsman"
                >
                  <WithStyles(ForwardRef(InputBase))
                    classes={
                      Object {
                        "input": "WithStyles(ForwardRef(InputBase))-input-3",
                        "root": "WithStyles(ForwardRef(InputBase))-root-2",
                      }
                    }
                    error={false}
                    inputComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "propTypes": Object {
                          "IconComponent": [Function],
                          "MenuProps": [Function],
                          "SelectDisplayProps": [Function],
                          "aria-label": [Function],
                          "autoFocus": [Function],
                          "autoWidth": [Function],
                          "children": [Function],
                          "className": [Function],
                          "classes": [Function],
                          "defaultValue": [Function],
                          "disabled": [Function],
                          "displayEmpty": [Function],
                          "inputRef": [Function],
                          "labelId": [Function],
                          "multiple": [Function],
                          "name": [Function],
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onClose": [Function],
                          "onFocus": [Function],
                          "onOpen": [Function],
                          "open": [Function],
                          "readOnly": [Function],
                          "renderValue": [Function],
                          "tabIndex": [Function],
                          "type": [Function],
                          "value": [Function],
                          "variant": [Function],
                        },
                        "render": [Function],
                      }
                    }
                    inputProps={
                      Object {
                        "IconComponent": Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        },
                        "MenuProps": undefined,
                        "SelectDisplayProps": Object {
                          "id": undefined,
                        },
                        "autoWidth": false,
                        "children": Array [
                          <ForwardRef(WithStyles)
                            value="batsman"
                          >
                            batsman
                          </ForwardRef(WithStyles)>,
                          <ForwardRef(WithStyles)
                            value="bowler"
                          >
                            bowler
                          </ForwardRef(WithStyles)>,
                        ],
                        "classes": Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "nativeInput": "MuiSelect-nativeInput",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        },
                        "displayEmpty": false,
                        "labelId": undefined,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    onChange={[MockFunction]}
                    required={false}
                    value="batsman"
                  >
                    <ForwardRef(InputBase)
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd",
                          "adornedStart": "MuiInputBase-adornedStart",
                          "colorSecondary": "MuiInputBase-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInputBase-formControl",
                          "fullWidth": "MuiInputBase-fullWidth",
                          "input": "MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                          "inputMarginDense": "MuiInputBase-inputMarginDense",
                          "inputMultiline": "MuiInputBase-inputMultiline",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                          "marginDense": "MuiInputBase-marginDense",
                          "multiline": "MuiInputBase-multiline",
                          "root": "MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2",
                        }
                      }
                      error={false}
                      inputComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "IconComponent": [Function],
                            "MenuProps": [Function],
                            "SelectDisplayProps": [Function],
                            "aria-label": [Function],
                            "autoFocus": [Function],
                            "autoWidth": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "displayEmpty": [Function],
                            "inputRef": [Function],
                            "labelId": [Function],
                            "multiple": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onClose": [Function],
                            "onFocus": [Function],
                            "onOpen": [Function],
                            "open": [Function],
                            "readOnly": [Function],
                            "renderValue": [Function],
                            "tabIndex": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        }
                      }
                      inputProps={
                        Object {
                          "IconComponent": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "render": [Function],
                            },
                          },
                          "MenuProps": undefined,
                          "SelectDisplayProps": Object {
                            "id": undefined,
                          },
                          "autoWidth": false,
                          "children": Array [
                            <ForwardRef(WithStyles)
                              value="batsman"
                            >
                              batsman
                            </ForwardRef(WithStyles)>,
                            <ForwardRef(WithStyles)
                              value="bowler"
                            >
                              bowler
                            </ForwardRef(WithStyles)>,
                          ],
                          "classes": Object {
                            "disabled": "Mui-disabled",
                            "filled": "MuiSelect-filled",
                            "icon": "MuiSelect-icon",
                            "iconFilled": "MuiSelect-iconFilled",
                            "iconOpen": "MuiSelect-iconOpen",
                            "iconOutlined": "MuiSelect-iconOutlined",
                            "nativeInput": "MuiSelect-nativeInput",
                            "outlined": "MuiSelect-outlined",
                            "root": "MuiSelect-root",
                            "select": "MuiSelect-select",
                            "selectMenu": "MuiSelect-selectMenu",
                          },
                          "displayEmpty": false,
                          "labelId": undefined,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      onChange={[MockFunction]}
                      required={false}
                      value="batsman"
                    >
                      <div
                        className="MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2 MuiInputBase-formControl"
                        onClick={[Function]}
                        required={false}
                      >
                        <ForwardRef(SelectInput)
                          IconComponent={
                            Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            }
                          }
                          SelectDisplayProps={
                            Object {
                              "id": undefined,
                            }
                          }
                          aria-invalid={false}
                          autoWidth={false}
                          className="MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            }
                          }
                          disabled={false}
                          displayEmpty={false}
                          inputRef={[Function]}
                          multiple={false}
                          onAnimationStart={[Function]}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={false}
                          value="batsman"
                          variant="standard"
                        >
                          <div
                            aria-haspopup="listbox"
                            className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            batsman
                          </div>
                          <input
                            aria-hidden={true}
                            className="MuiSelect-nativeInput"
                            onAnimationStart={[Function]}
                            onChange={[Function]}
                            required={false}
                            tabIndex={-1}
                            value="batsman"
                          />
                          <ForwardRef(ArrowDropDownIcon)
                            className="MuiSelect-icon"
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              className="MuiSelect-icon"
                            >
                              <ForwardRef(SvgIcon)
                                className="MuiSelect-icon"
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden={true}
                                  className="MuiSvgIcon-root MuiSelect-icon"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M7 10l5 5 5-5z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef(ArrowDropDownIcon)>
                          <WithStyles(ForwardRef(Menu))
                            MenuListProps={
                              Object {
                                "aria-labelledby": undefined,
                                "disableListWrap": true,
                                "role": "listbox",
                              }
                            }
                            PaperProps={
                              Object {
                                "style": Object {
                                  "minWidth": undefined,
                                },
                              }
                            }
                            anchorEl={
                              <div
                                aria-haspopup="listbox"
                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                role="button"
                                tabindex="0"
                              >
                                batsman
                              </div>
                            }
                            id="menu-"
                            onClose={[Function]}
                            open={false}
                          >
                            <ForwardRef(Menu)
                              MenuListProps={
                                Object {
                                  "aria-labelledby": undefined,
                                  "disableListWrap": true,
                                  "role": "listbox",
                                }
                              }
                              PaperProps={
                                Object {
                                  "style": Object {
                                    "minWidth": undefined,
                                  },
                                }
                              }
                              anchorEl={
                                <div
                                  aria-haspopup="listbox"
                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                  role="button"
                                  tabindex="0"
                                >
                                  batsman
                                </div>
                              }
                              classes={
                                Object {
                                  "list": "MuiMenu-list",
                                  "paper": "MuiMenu-paper",
                                }
                              }
                              id="menu-"
                              onClose={[Function]}
                              open={false}
                            >
                              <WithStyles(ForwardRef(Popover))
                                PaperProps={
                                  Object {
                                    "classes": Object {
                                      "root": "MuiMenu-paper",
                                    },
                                    "style": Object {
                                      "minWidth": undefined,
                                    },
                                  }
                                }
                                anchorEl={
                                  <div
                                    aria-haspopup="listbox"
                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                    role="button"
                                    tabindex="0"
                                  >
                                    batsman
                                  </div>
                                }
                                anchorOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                getContentAnchorEl={[Function]}
                                id="menu-"
                                onClose={[Function]}
                                onEntering={[Function]}
                                open={false}
                                transformOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                transitionDuration="auto"
                              >
                                <ForwardRef(Popover)
                                  PaperProps={
                                    Object {
                                      "classes": Object {
                                        "root": "MuiMenu-paper",
                                      },
                                      "style": Object {
                                        "minWidth": undefined,
                                      },
                                    }
                                  }
                                  anchorEl={
                                    <div
                                      aria-haspopup="listbox"
                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                      role="button"
                                      tabindex="0"
                                    >
                                      batsman
                                    </div>
                                  }
                                  anchorOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  classes={
                                    Object {
                                      "paper": "MuiPopover-paper",
                                      "root": "MuiPopover-root",
                                    }
                                  }
                                  getContentAnchorEl={[Function]}
                                  id="menu-"
                                  onClose={[Function]}
                                  onEntering={[Function]}
                                  open={false}
                                  transformOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  transitionDuration="auto"
                                >
                                  <ForwardRef(Modal)
                                    BackdropProps={
                                      Object {
                                        "invisible": true,
                                      }
                                    }
                                    className="MuiPopover-root"
                                    container={<body />}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                  />
                                </ForwardRef(Popover)>
                              </WithStyles(ForwardRef(Popover))>
                            </ForwardRef(Menu)>
                          </WithStyles(ForwardRef(Menu))>
                        </ForwardRef(SelectInput)>
                      </div>
                    </ForwardRef(InputBase)>
                  </WithStyles(ForwardRef(InputBase))>
                </WithStyles(WithStyles(ForwardRef(InputBase)))>
              </ForwardRef(Select)>
            </WithStyles(ForwardRef(Select))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </Dropdwon>
  </div>
</Memo()>
`;

exports[`Player should render properly 1`] = `
<div
  style={
    Object {
      "alignItems": "center",
      "display": "flex",
      "justifyContent": "space-between",
    }
  }
>
  <Textbox
    error={false}
    placeholder="Name"
    required={false}
  />
  <Dropdwon />
</div>
`;

exports[`Player should render properly with props 1`] = `
<Memo()
  isNameError={false}
  isNameReqired={true}
  name="test player"
  onNameBlur={[MockFunction]}
  onNameChange={[MockFunction]}
  onNameFocus={[MockFunction]}
  onPlayerTypeChange={[MockFunction]}
  options={
    Array [
      "batsman",
      "bowler",
    ]
  }
  placeholder="Name"
  type="batsman"
>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "justifyContent": "space-between",
      }
    }
  >
    <Textbox
      error={false}
      onBlur={[MockFunction]}
      onChange={[MockFunction]}
      onFocus={[MockFunction]}
      placeholder="Name"
      required={true}
      value="test player"
    >
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-margin-1"
      >
        <ForwardRef(FormControl)
          className="makeStyles-margin-1"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
        >
          <div
            className="MuiFormControl-root makeStyles-margin-1"
          >
            <WithStyles(ForwardRef(InputLabel))
              error={false}
              htmlFor="customized-textboxundefined"
              required={true}
              style={
                Object {
                  "backgroundColor": "#FFF",
                }
              }
              variant="filled"
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                error={false}
                htmlFor="customized-textboxundefined"
                required={true}
                style={
                  Object {
                    "backgroundColor": "#FFF",
                  }
                }
                variant="filled"
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={true}
                  error={false}
                  htmlFor="customized-textboxundefined"
                  required={true}
                  style={
                    Object {
                      "backgroundColor": "#FFF",
                    }
                  }
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={true}
                    error={false}
                    htmlFor="customized-textboxundefined"
                    required={true}
                    style={
                      Object {
                        "backgroundColor": "#FFF",
                      }
                    }
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-filled MuiFormLabel-filled Mui-required Mui-required"
                      data-shrink={true}
                      htmlFor="customized-textboxundefined"
                      style={
                        Object {
                          "backgroundColor": "#FFF",
                        }
                      }
                    >
                      Name
                      <span
                        aria-hidden={true}
                        className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                      >
                        â€‰
                        *
                      </span>
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(WithStyles(ForwardRef(InputBase)))
              error={false}
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              onFocus={[MockFunction]}
              placeholder="Name"
              required={true}
              value="test player"
            >
              <WithStyles(ForwardRef(InputBase))
                classes={
                  Object {
                    "input": "WithStyles(ForwardRef(InputBase))-input-3",
                    "root": "WithStyles(ForwardRef(InputBase))-root-2",
                  }
                }
                error={false}
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                onFocus={[MockFunction]}
                placeholder="Name"
                required={true}
                value="test player"
              >
                <ForwardRef(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd",
                      "adornedStart": "MuiInputBase-adornedStart",
                      "colorSecondary": "MuiInputBase-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInputBase-formControl",
                      "fullWidth": "MuiInputBase-fullWidth",
                      "input": "MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                      "inputMarginDense": "MuiInputBase-inputMarginDense",
                      "inputMultiline": "MuiInputBase-inputMultiline",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                      "marginDense": "MuiInputBase-marginDense",
                      "multiline": "MuiInputBase-multiline",
                      "root": "MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2",
                    }
                  }
                  error={false}
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  onFocus={[MockFunction]}
                  placeholder="Name"
                  required={true}
                  value="test player"
                >
                  <div
                    className="MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2 MuiInputBase-formControl"
                    onClick={[Function]}
                    required={true}
                  >
                    <input
                      aria-invalid={false}
                      className="MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                      disabled={false}
                      onAnimationStart={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Name"
                      required={true}
                      type="text"
                      value="test player"
                    />
                  </div>
                </ForwardRef(InputBase)>
              </WithStyles(ForwardRef(InputBase))>
            </WithStyles(WithStyles(ForwardRef(InputBase)))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </Textbox>
    <Dropdwon
      onChange={[MockFunction]}
      options={
        Array [
          "batsman",
          "bowler",
        ]
      }
      value="batsman"
    >
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-margin-1"
      >
        <ForwardRef(FormControl)
          className="makeStyles-margin-1"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
        >
          <div
            className="MuiFormControl-root makeStyles-margin-1"
          >
            <WithStyles(ForwardRef(InputLabel))
              error={false}
              htmlFor="selectundefined"
              required={false}
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                error={false}
                htmlFor="selectundefined"
                required={false}
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={true}
                  error={false}
                  htmlFor="selectundefined"
                  required={false}
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={true}
                    error={false}
                    htmlFor="selectundefined"
                    required={false}
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled"
                      data-shrink={true}
                      htmlFor="selectundefined"
                    >
                      Type
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(ForwardRef(Select))
              error={false}
              input={<ForwardRef(WithStyles) />}
              onChange={[MockFunction]}
              required={false}
              value="batsman"
            >
              <ForwardRef(Select)
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "filled": "MuiSelect-filled",
                    "icon": "MuiSelect-icon",
                    "iconFilled": "MuiSelect-iconFilled",
                    "iconOpen": "MuiSelect-iconOpen",
                    "iconOutlined": "MuiSelect-iconOutlined",
                    "nativeInput": "MuiSelect-nativeInput",
                    "outlined": "MuiSelect-outlined",
                    "root": "MuiSelect-root",
                    "select": "MuiSelect-select",
                    "selectMenu": "MuiSelect-selectMenu",
                  }
                }
                error={false}
                input={<ForwardRef(WithStyles) />}
                onChange={[MockFunction]}
                required={false}
                value="batsman"
              >
                <WithStyles(WithStyles(ForwardRef(InputBase)))
                  error={false}
                  inputComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "IconComponent": [Function],
                        "MenuProps": [Function],
                        "SelectDisplayProps": [Function],
                        "aria-label": [Function],
                        "autoFocus": [Function],
                        "autoWidth": [Function],
                        "children": [Function],
                        "className": [Function],
                        "classes": [Function],
                        "defaultValue": [Function],
                        "disabled": [Function],
                        "displayEmpty": [Function],
                        "inputRef": [Function],
                        "labelId": [Function],
                        "multiple": [Function],
                        "name": [Function],
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onClose": [Function],
                        "onFocus": [Function],
                        "onOpen": [Function],
                        "open": [Function],
                        "readOnly": [Function],
                        "renderValue": [Function],
                        "tabIndex": [Function],
                        "type": [Function],
                        "value": [Function],
                        "variant": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  inputProps={
                    Object {
                      "IconComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "render": [Function],
                        },
                      },
                      "MenuProps": undefined,
                      "SelectDisplayProps": Object {
                        "id": undefined,
                      },
                      "autoWidth": false,
                      "children": Array [
                        <ForwardRef(WithStyles)
                          value="batsman"
                        >
                          batsman
                        </ForwardRef(WithStyles)>,
                        <ForwardRef(WithStyles)
                          value="bowler"
                        >
                          bowler
                        </ForwardRef(WithStyles)>,
                      ],
                      "classes": Object {
                        "disabled": "Mui-disabled",
                        "filled": "MuiSelect-filled",
                        "icon": "MuiSelect-icon",
                        "iconFilled": "MuiSelect-iconFilled",
                        "iconOpen": "MuiSelect-iconOpen",
                        "iconOutlined": "MuiSelect-iconOutlined",
                        "nativeInput": "MuiSelect-nativeInput",
                        "outlined": "MuiSelect-outlined",
                        "root": "MuiSelect-root",
                        "select": "MuiSelect-select",
                        "selectMenu": "MuiSelect-selectMenu",
                      },
                      "displayEmpty": false,
                      "labelId": undefined,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={[MockFunction]}
                  required={false}
                  value="batsman"
                >
                  <WithStyles(ForwardRef(InputBase))
                    classes={
                      Object {
                        "input": "WithStyles(ForwardRef(InputBase))-input-3",
                        "root": "WithStyles(ForwardRef(InputBase))-root-2",
                      }
                    }
                    error={false}
                    inputComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "propTypes": Object {
                          "IconComponent": [Function],
                          "MenuProps": [Function],
                          "SelectDisplayProps": [Function],
                          "aria-label": [Function],
                          "autoFocus": [Function],
                          "autoWidth": [Function],
                          "children": [Function],
                          "className": [Function],
                          "classes": [Function],
                          "defaultValue": [Function],
                          "disabled": [Function],
                          "displayEmpty": [Function],
                          "inputRef": [Function],
                          "labelId": [Function],
                          "multiple": [Function],
                          "name": [Function],
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onClose": [Function],
                          "onFocus": [Function],
                          "onOpen": [Function],
                          "open": [Function],
                          "readOnly": [Function],
                          "renderValue": [Function],
                          "tabIndex": [Function],
                          "type": [Function],
                          "value": [Function],
                          "variant": [Function],
                        },
                        "render": [Function],
                      }
                    }
                    inputProps={
                      Object {
                        "IconComponent": Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        },
                        "MenuProps": undefined,
                        "SelectDisplayProps": Object {
                          "id": undefined,
                        },
                        "autoWidth": false,
                        "children": Array [
                          <ForwardRef(WithStyles)
                            value="batsman"
                          >
                            batsman
                          </ForwardRef(WithStyles)>,
                          <ForwardRef(WithStyles)
                            value="bowler"
                          >
                            bowler
                          </ForwardRef(WithStyles)>,
                        ],
                        "classes": Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "nativeInput": "MuiSelect-nativeInput",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        },
                        "displayEmpty": false,
                        "labelId": undefined,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    onChange={[MockFunction]}
                    required={false}
                    value="batsman"
                  >
                    <ForwardRef(InputBase)
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd",
                          "adornedStart": "MuiInputBase-adornedStart",
                          "colorSecondary": "MuiInputBase-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInputBase-formControl",
                          "fullWidth": "MuiInputBase-fullWidth",
                          "input": "MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                          "inputMarginDense": "MuiInputBase-inputMarginDense",
                          "inputMultiline": "MuiInputBase-inputMultiline",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                          "marginDense": "MuiInputBase-marginDense",
                          "multiline": "MuiInputBase-multiline",
                          "root": "MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2",
                        }
                      }
                      error={false}
                      inputComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "IconComponent": [Function],
                            "MenuProps": [Function],
                            "SelectDisplayProps": [Function],
                            "aria-label": [Function],
                            "autoFocus": [Function],
                            "autoWidth": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "displayEmpty": [Function],
                            "inputRef": [Function],
                            "labelId": [Function],
                            "multiple": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onClose": [Function],
                            "onFocus": [Function],
                            "onOpen": [Function],
                            "open": [Function],
                            "readOnly": [Function],
                            "renderValue": [Function],
                            "tabIndex": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        }
                      }
                      inputProps={
                        Object {
                          "IconComponent": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "render": [Function],
                            },
                          },
                          "MenuProps": undefined,
                          "SelectDisplayProps": Object {
                            "id": undefined,
                          },
                          "autoWidth": false,
                          "children": Array [
                            <ForwardRef(WithStyles)
                              value="batsman"
                            >
                              batsman
                            </ForwardRef(WithStyles)>,
                            <ForwardRef(WithStyles)
                              value="bowler"
                            >
                              bowler
                            </ForwardRef(WithStyles)>,
                          ],
                          "classes": Object {
                            "disabled": "Mui-disabled",
                            "filled": "MuiSelect-filled",
                            "icon": "MuiSelect-icon",
                            "iconFilled": "MuiSelect-iconFilled",
                            "iconOpen": "MuiSelect-iconOpen",
                            "iconOutlined": "MuiSelect-iconOutlined",
                            "nativeInput": "MuiSelect-nativeInput",
                            "outlined": "MuiSelect-outlined",
                            "root": "MuiSelect-root",
                            "select": "MuiSelect-select",
                            "selectMenu": "MuiSelect-selectMenu",
                          },
                          "displayEmpty": false,
                          "labelId": undefined,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      onChange={[MockFunction]}
                      required={false}
                      value="batsman"
                    >
                      <div
                        className="MuiInputBase-root WithStyles(ForwardRef(InputBase))-root-2 MuiInputBase-formControl"
                        onClick={[Function]}
                        required={false}
                      >
                        <ForwardRef(SelectInput)
                          IconComponent={
                            Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            }
                          }
                          SelectDisplayProps={
                            Object {
                              "id": undefined,
                            }
                          }
                          aria-invalid={false}
                          autoWidth={false}
                          className="MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            }
                          }
                          disabled={false}
                          displayEmpty={false}
                          inputRef={[Function]}
                          multiple={false}
                          onAnimationStart={[Function]}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={false}
                          value="batsman"
                          variant="standard"
                        >
                          <div
                            aria-haspopup="listbox"
                            className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            batsman
                          </div>
                          <input
                            aria-hidden={true}
                            className="MuiSelect-nativeInput"
                            onAnimationStart={[Function]}
                            onChange={[Function]}
                            required={false}
                            tabIndex={-1}
                            value="batsman"
                          />
                          <ForwardRef(ArrowDropDownIcon)
                            className="MuiSelect-icon"
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              className="MuiSelect-icon"
                            >
                              <ForwardRef(SvgIcon)
                                className="MuiSelect-icon"
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden={true}
                                  className="MuiSvgIcon-root MuiSelect-icon"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M7 10l5 5 5-5z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef(ArrowDropDownIcon)>
                          <WithStyles(ForwardRef(Menu))
                            MenuListProps={
                              Object {
                                "aria-labelledby": undefined,
                                "disableListWrap": true,
                                "role": "listbox",
                              }
                            }
                            PaperProps={
                              Object {
                                "style": Object {
                                  "minWidth": undefined,
                                },
                              }
                            }
                            anchorEl={
                              <div
                                aria-haspopup="listbox"
                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                role="button"
                                tabindex="0"
                              >
                                batsman
                              </div>
                            }
                            id="menu-"
                            onClose={[Function]}
                            open={false}
                          >
                            <ForwardRef(Menu)
                              MenuListProps={
                                Object {
                                  "aria-labelledby": undefined,
                                  "disableListWrap": true,
                                  "role": "listbox",
                                }
                              }
                              PaperProps={
                                Object {
                                  "style": Object {
                                    "minWidth": undefined,
                                  },
                                }
                              }
                              anchorEl={
                                <div
                                  aria-haspopup="listbox"
                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                  role="button"
                                  tabindex="0"
                                >
                                  batsman
                                </div>
                              }
                              classes={
                                Object {
                                  "list": "MuiMenu-list",
                                  "paper": "MuiMenu-paper",
                                }
                              }
                              id="menu-"
                              onClose={[Function]}
                              open={false}
                            >
                              <WithStyles(ForwardRef(Popover))
                                PaperProps={
                                  Object {
                                    "classes": Object {
                                      "root": "MuiMenu-paper",
                                    },
                                    "style": Object {
                                      "minWidth": undefined,
                                    },
                                  }
                                }
                                anchorEl={
                                  <div
                                    aria-haspopup="listbox"
                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                    role="button"
                                    tabindex="0"
                                  >
                                    batsman
                                  </div>
                                }
                                anchorOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                getContentAnchorEl={[Function]}
                                id="menu-"
                                onClose={[Function]}
                                onEntering={[Function]}
                                open={false}
                                transformOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                transitionDuration="auto"
                              >
                                <ForwardRef(Popover)
                                  PaperProps={
                                    Object {
                                      "classes": Object {
                                        "root": "MuiMenu-paper",
                                      },
                                      "style": Object {
                                        "minWidth": undefined,
                                      },
                                    }
                                  }
                                  anchorEl={
                                    <div
                                      aria-haspopup="listbox"
                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input WithStyles(ForwardRef(InputBase))-input-3"
                                      role="button"
                                      tabindex="0"
                                    >
                                      batsman
                                    </div>
                                  }
                                  anchorOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  classes={
                                    Object {
                                      "paper": "MuiPopover-paper",
                                      "root": "MuiPopover-root",
                                    }
                                  }
                                  getContentAnchorEl={[Function]}
                                  id="menu-"
                                  onClose={[Function]}
                                  onEntering={[Function]}
                                  open={false}
                                  transformOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  transitionDuration="auto"
                                >
                                  <ForwardRef(Modal)
                                    BackdropProps={
                                      Object {
                                        "invisible": true,
                                      }
                                    }
                                    className="MuiPopover-root"
                                    container={<body />}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                  />
                                </ForwardRef(Popover)>
                              </WithStyles(ForwardRef(Popover))>
                            </ForwardRef(Menu)>
                          </WithStyles(ForwardRef(Menu))>
                        </ForwardRef(SelectInput)>
                      </div>
                    </ForwardRef(InputBase)>
                  </WithStyles(ForwardRef(InputBase))>
                </WithStyles(WithStyles(ForwardRef(InputBase)))>
              </ForwardRef(Select)>
            </WithStyles(ForwardRef(Select))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </Dropdwon>
  </div>
</Memo()>
`;
